#!/bin/bash

error() { echo -e "$1" && exit; }

checkDependency() {
    which "$1" > /dev/null || error "This script required $1 to work, so install it first!"
}

checkInternet() {
    wget --hsts-file="$_cacheDir/wget-hsts" --quiet --spider google.com &&
        return 0 || { echo "No internet!" && return 1;}
}

setup() {
	checkDependency feh
    checkDependency wget
    checkDependency jq
    checkDependency ffmpeg
    checkDependency sed
    _cacheDir="$HOME/.cache"
    _nowaterDir="$_cacheDir/nowater"
    _default_wp_url="https://raw.githubusercontent.com/justanoobcoder/nowater/master/default.jpg"
    _link="https://source.unsplash.com/random/"
    [ ! -d "$_nowaterDir" ] && mkdir -p "$_nowaterDir"
    [ ! -f "$_nowaterDir/default.jpg" ] && checkInternet &&
        wget --hsts-file="$_cacheDir/wget-hsts" -T 60 --no-check-certificate -q -P down -O "$_nowaterDir/default.jpg" $_default_wp_url
}

usage() {
    echo "Usage: nowater <option> <argument>
                    [-b | --fehbg <feh bg opt>]
                    [-c | --fehopt <feh opt>]
                    [-l | --link <source>]
                    [-s | --search <keyword>]
                    [-r | --subreddit <subreddit>]
                    [-t | --time <cycle time>]
                    [-f | --file <image file>]
                    [-d | --directory <image directory>]
                    [-v | --video <video file>]
                    [-F | --fps <frame per second>]
                    [-D | --duration <duration time>]
                    [-p | --position <start point of video>]
                    [-k | --kill]
                    [-h | --help]"
    exit
}

get_args() {
    PARSED_ARGUMENTS=$(getopt -a -n $0 -o b:c:l:s:r:t:f:d:v:F:D:p:kh \
        -l fehbg:,fehopt:,link:,search:,subreddit:,time:,file:,directory:,video:,fps:,duration:,position:,kill,help -- "$@")
    [ $? -ne 0 ] && usage

    while :; do
        case "$1" in
            -b | --fehbg)       _bgtype=${2} ; shift 2 ;;
            -c | --fehopt)      _custom=${2} ; shift 2 ;;
            -l | --link)        _custom_link=${2} ; shift 2 ;;
            -s | --search)      _search=${2} ; shift 2 ;;
            -r | --subreddit)   _sub=${2} ; shift 2 ;;
            -t | --time)        _time=${2} ; shift 2 ;;
            -f | --file)        _file=${2} ; shift 2 ;;
            -d | --directory)   _dir=${2} ; shift 2 ;;
            -v | --video)       _video=${2} ; shift 2 ;;
            -F | --fps)         _fps=${2} ; shift 2 ;;
            -D | --duration)    _duration=${2} ; shift 2 ;;
            -p | --position)    _position=${2} ; shift 2 ;;
            -k | --kill)        killall "${0##*/}"; exit ;;
            -h | --help)        usage ;;
            -- | '')            shift; break ;;
            *) echo "Unexpected option: $1 is not a valid option." ; usage ;;
        esac
    done
}

unsplash() {
    local _search="${_search// /_}"
    _link="${_link}1920x1080";
    [ -n "$_search" ] && _link="${_link}/?${_search}"
}

reddit() {
    checkInternet || return

    [ ! -f "$_nowaterDir/subreddits" ] && printf "wallpaper\nwallpapers" > "$_nowaterDir/subreddits"

    readarray _subreddits < "$_nowaterDir/subreddits"
    a=${#_subreddits[@]}
    b=$(($RANDOM % $a))
    _sub=${_subreddits[$b]}
    _sub="$(echo -e "${_sub}" | tr -d '[:space:]')"
    [ -n "$1" ] && _sub=$1
    _url="https://www.reddit.com/r/$_sub/hot/.json?raw_json=1&t="
    _content=`wget --hsts-file="$_cacheDir/wget-hsts" -T 10 -q -O - $_url`
    _urls=$(echo -n "$_content"| jq -r '.data.children[]|select(.data.post_hint|test("image")?) | .data.preview.images[0].source.url')
    _arrURLS=($_urls)
    wait
    _size=${#_arrURLS[@]}
    if [ $_size -eq 0 ]; then
        [ -f /tmp/nowater.jpg ] && _feh+=("/tmp/nowater.jpg") || "${_feh[@]}" "$_nowaterDir/default.jpg"
        error "The current subreddit is not valid."
    fi
    idx=$(($RANDOM % $_size))
    _target_url=${_arrURLS[$idx]}
    wget --hsts-file="$_cacheDir/wget-hsts" -T 10 --no-check-certificate -q -P down -O "/tmp/nowater.jpg" $_target_url &>/dev/null
}

bgtypeFunc() {
    [ "$_bgtype" == "bg-center" ]    && _feh+=(--bg-center)
    [ "$_bgtype" == "bg-fill" ]      && _feh+=(--bg-fill)
    [ "$_bgtype" == "bg-max" ]       && _feh+=(--bg-max)
    [ "$_bgtype" == "bg-scale" ]     && _feh+=(--bg-scale)
    [ "$_bgtype" == "bg-tile" ]      && _feh+=(--bg-tile)
}

videoFunc() {
    _video_dir="$_nowaterDir/video"
    [ ! -d "$_video_dir" ] && mkdir -p "$_video_dir" || rm -rf "$_video_dir"/*

    [ -z "$_fps" ] && _fps=23
    [ -z "$_duration" ] && _duration=10
    [ -z "$_position" ] && _position="00:00"

    ffmpeg -y -ss "$_position" -i "$_video" -t $_duration -vf fps=$_fps "$_video_dir/videoframe%06d.jpg" -loglevel error
    _frameCount=$(ls "$_video_dir"/*.jpg | wc -l)
    echo "$_video" > "$_video_dir/video.info"

    for ((i=1; ; ++i)); do
        [ $i -gt $_frameCount ] && i=1              
        "${_feh[@]}" $(ls -1 "$_video_dir/"*.jpg | sed -n "${i}p")
        sleep 0.01
    done
}

directoryFunc() {
    _feh+=(--randomize)
    while :; do
        "${_feh[@]}" "$_dir"
        [ -n "$_time" ] && sleep "$_time" || break
    done
}

onlineFunc() {
    while :; do
        if [ -f /tmp/login.nowall ]; then
            if [ "$_custom_link" == "reddit" ] || [ -n "$_sub" ]; then
                reddit "$_sub"
            else
                [ -n "$_custom_link" ] && _link="$_custom_link" || unsplash
                checkInternet && wget --hsts-file="$_cacheDir/wget-hsts" -q -O "/tmp/nowater.jpg" "$_link"
            fi
            "${_feh[@]}" "/tmp/nowater.jpg"
        else
            "${_feh[@]}" "$_nowaterDir/default.jpg"
            touch /tmp/login.nowall
        fi
        [ -n "$_time" ] && sleep "$_time" || break
    done
}

main() {
    [ $EUID -eq 0 ] && error "Do not run this script as root."

    setup
    get_args "$@"

    _feh=(feh --no-fehbg)
    [ -n "$_bgtype" ] && bgtypeFunc || _feh+=(--bg-scale)
    [ -n "$_custom" ] && _feh+=($_custom)
    if [ -n "$_video" ]; then
        videoFunc &
    else {
        if [ -n "$_dir" ]; then
            directoryFunc &
        elif [ -n "$_file" ]; then
            "${_feh[@]}" "$_file"
        else
            onlineFunc &
        fi
    }
    fi

    return 0
}

main "$@"
